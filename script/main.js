// Generated by CoffeeScript 1.7.1
var App, Dragger, Events, HistoryManager, Win, WinHistoryMngr, WindowManager, clicked, d, hideInfoPanel, info_panel, log, showInfoPanel, toggleInfoPanel, use_storage,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

log = console.log.bind(console);

d = document;

use_storage = false;

Dragger = (function() {
  Dragger.prototype.is_active = false;

  Dragger.prototype.dragged_win = null;

  Dragger.prototype.resized_win = null;

  Dragger.prototype.prior_pos = null;

  Dragger.prototype.handle = null;

  function Dragger(app) {
    this.app = app;
    this.end = __bind(this.end, this);
    this.move = __bind(this.move, this);
    this.start = __bind(this.start, this);
    this.addListeners(this.app.el);
  }

  Dragger.prototype.addListeners = function(el) {
    el.addEventListener('mousedown', this.start, false);
    el.addEventListener('mousemove', this.move, false);
    return el.addEventListener('mouseup', this.end, false);
  };

  Dragger.prototype.start = function(evt) {
    var win;
    App.windowClicked(evt.target);
    this.handle = evt.target.className;
    this.is_active = true;
    this.prior_pos = {
      x: evt.clientX,
      y: evt.clientY
    };
    win = App.getWindow(evt.target);
    if (/bttn/.test(this.handle)) {
      if (this.handle === 'un_bttn') {
        win.undo();
      }
      if (this.handle === 're_bttn') {
        win.redo();
      }
      return;
    }
    if (this.handle === 'title_bar') {
      this.dragged_win = win;
      this.dragged_win.setDragging(true);
    }
    if (/resize/.test(this.handle)) {
      this.resized_win = win;
      this.resized_win.setResizing(true);
    }
    this.app.initNewHistoryEvent(evt);
    if (win != null) {
      win.showoptionsMenu(this.handle);
    }
    if (evt.button === 2) {
      return log(win.history);
    }
  };

  Dragger.prototype.move = function(evt) {
    var pos, _ref, _ref1;
    if (this.is_active === true) {
      pos = {
        x: evt.clientX - this.prior_pos.x,
        y: evt.clientY - this.prior_pos.y
      };
      if ((_ref = this.dragged_win) != null) {
        _ref.dragged(pos.x, pos.y);
      }
      if ((_ref1 = this.resized_win) != null) {
        _ref1.resized(pos.x, pos.y, this.handle);
      }
      return this.prior_pos = {
        x: evt.clientX,
        y: evt.clientY
      };
    }
  };

  Dragger.prototype.end = function(evt) {
    var _ref, _ref1;
    if (this.handle === 'win_ctrls') {
      App.handleMouseUp(evt.target);
    }
    if (/bttn/.test(this.handle)) {
      return;
    }
    this.handle = null;
    this.is_active = false;
    if ((_ref = this.dragged_win) != null) {
      _ref.setDragging(false);
    }
    this.dragged_win = null;
    if ((_ref1 = this.resized_win) != null) {
      _ref1.setResizing(false);
    }
    this.resized_win = null;
    return this.app.logHistoryEvent(evt);
  };

  return Dragger;

})();

Win = (function() {
  function Win(x, y, w, h) {
    var bg, redo_bttn, resize_bot, resize_bot_right, resize_left, resize_right, resize_top, title_bar, undo_bttn, win_ctrls, win_opts;
    if (x == null) {
      x = 100;
    }
    if (y == null) {
      y = 100;
    }
    if (w == null) {
      w = 300;
    }
    if (h == null) {
      h = 200;
    }
    this.history = new HistoryManager(this);
    events.listenTo(this.history, 'change_logged', this.historyEventLogged, this);
    this.pos = {
      x: x,
      y: y
    };
    this.size = {
      w: w,
      h: h
    };
    this.initial = {
      pos: this.pos,
      size: this.size
    };
    this.visible = true;
    this.el = d.createElement('div');
    this.el.className = 'win';
    this.el.style.width = "" + this.size.w + "px";
    this.el.style.height = "" + this.size.h + "px";
    this.el.style.left = "" + this.pos.x + "px";
    this.el.style.top = "" + this.pos.y + "px";
    bg = d.createElement('div');
    bg.className = 'bg';
    this.el.appendChild(bg);
    title_bar = d.createElement('span');
    title_bar.className = 'title_bar';
    win_ctrls = d.createElement('span');
    win_ctrls.className = 'win_ctrls';
    title_bar.appendChild(win_ctrls);
    win_opts = d.createElement('span');
    win_opts.className = 'win_opts';
    title_bar.appendChild(win_opts);
    this.options_menu = d.createElement('span');
    this.options_menu.className = 'options_menu hidden';
    undo_bttn = d.createElement('button');
    undo_bttn.className = 'un_bttn';
    undo_bttn.textContent = '<–';
    this.options_menu.appendChild(undo_bttn);
    redo_bttn = d.createElement('button');
    redo_bttn.className = 're_bttn';
    redo_bttn.textContent = '–>';
    this.options_menu.appendChild(redo_bttn);
    title_bar.appendChild(this.options_menu);
    this.el.appendChild(title_bar);
    this.history_panel_el = d.createElement('div');
    this.history_panel_el.className = 'win_history';
    this.el.appendChild(this.history_panel_el);
    resize_top = d.createElement('span');
    resize_top.className = 'resize top';
    resize_right = d.createElement('span');
    resize_right.className = 'resize right';
    this.el.appendChild(resize_right);
    resize_bot = d.createElement('span');
    resize_bot.className = 'resize bot';
    this.el.appendChild(resize_bot);
    resize_left = d.createElement('span');
    resize_left.className = 'resize left';
    this.el.appendChild(resize_left);
    resize_bot_right = d.createElement('span');
    resize_bot_right.className = 'resize bot_right';
    this.el.appendChild(resize_bot_right);
  }

  Win.prototype.update = function(unused_id, history_event) {
    this.moveTo(history_event.pos);
    this.resizeTo(history_event.size);
    return this.show(history_event.visible);
  };

  Win.prototype.moveTo = function(pos) {
    this.pos.x = pos.x;
    this.pos.y = pos.y;
    this.el.style.left = "" + this.pos.x + "px";
    return this.el.style.top = "" + this.pos.y + "px";
  };

  Win.prototype.resizeTo = function(size) {
    this.size.w = size.w;
    this.size.h = size.h;
    this.el.style.width = "" + this.size.w + "px";
    return this.el.style.height = "" + this.size.h + "px";
  };

  Win.prototype.dragged = function(x, y) {
    this.pos.x += x;
    this.pos.y += y;
    this.el.style.left = "" + this.pos.x + "px";
    return this.el.style.top = "" + this.pos.y + "px";
  };

  Win.prototype.resized = function(w, h, class_name) {
    if (/top/.test(class_name)) {
      this.pos.y += h;
      this.size.h -= h;
      this.el.style.top = "" + this.pos.y + "px";
      this.el.style.height = "" + this.size.h + "px";
    }
    if (/right/.test(class_name)) {
      this.size.w += w;
      this.el.style.width = "" + this.size.w + "px";
    }
    if (/bot/.test(class_name)) {
      this.size.h += h;
      this.el.style.height = "" + this.size.h + "px";
    }
    if (/left/.test(class_name)) {
      this.pos.x += w;
      this.size.w -= w;
      this.el.style.left = "" + this.pos.x + "px";
      return this.el.style.width = "" + this.size.w + "px";
    }
  };

  Win.prototype.setDragging = function(frealz) {
    return this.el.classList.toggle('dragging');
  };

  Win.prototype.setResizing = function(frealz) {
    return this.el.classList.toggle('resizing');
  };

  Win.prototype.show = function(frealz) {
    this.visible = frealz;
    if (frealz === true) {
      return this.el.classList.remove('hidden');
    } else {
      return this.el.classList.add('hidden');
    }
  };

  Win.prototype.showoptionsMenu = function(class_name) {
    if (/bttn/.test(class_name)) {
      return;
    }
    if (class_name === 'win_opts') {
      return this.options_menu.classList.toggle('hidden');
    } else {
      return this.options_menu.classList.add('hidden');
    }
  };

  Win.prototype.undo = function() {
    this.history.stepBack();
    return this.updateHistoryPanel(this.history);
  };

  Win.prototype.redo = function() {
    this.history.stepForward();
    return this.updateHistoryPanel(this.history);
  };

  Win.prototype.historyEventLogged = function(hist_mnr) {
    return this.updateHistoryPanel(hist_mnr);
  };

  Win.prototype.updateHistoryPanel = function(hist_mnr) {
    var action_name, cng_evt, i, item, sel_class, time, vector_a, vector_b, win_id, _i, _len, _ref, _results;
    this.history_panel_el.innerHTML = '';
    _ref = hist_mnr.change_events;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      cng_evt = _ref[i];
      win_id = cng_evt.window_id;
      action_name = 'moved to';
      vector_a = cng_evt.end.pos.x;
      vector_b = cng_evt.end.pos.y;
      time = new Date(cng_evt.timestamp).toTimeString().substring(0, 9);
      sel_class = i === hist_mnr.index ? ' selected' : '';
      item = d.createElement('div');
      item.className = "history_item" + sel_class;
      item.textContent = "" + action_name + " " + vector_a + ", " + vector_b + " :: " + time;
      _results.push(this.history_panel_el.appendChild(item));
    }
    return _results;
  };

  return Win;

})();

HistoryManager = (function() {
  function HistoryManager(parent) {
    this.parent = parent;
    this.change_events = [];
    this.index = 0;
    this.prior_index = 0;
    this.temp_event = null;
    this.last_action = null;
  }

  HistoryManager.prototype.initTempLog = function(win) {
    return this.temp_event = this.createNew(win);
  };

  HistoryManager.prototype.log = function(win, tag) {
    var new_event;
    if (this.isANoChangeEvent(win) === true) {
      return;
    }
    new_event = this.finalizeEvent(win, tag);
    if (this.index !== this.change_events.length) {
      this.change_events = this.change_events.slice(0, this.index);
    }
    this.change_events.push(new_event);
    events.dispatch('change_logged', this);
    this.index += 1;
    return this.last_action = 'logged';
  };

  HistoryManager.prototype.createNew = function(win) {
    var init_event;
    return init_event = {
      window_id: win.id,
      start: {
        pos: {
          x: win.pos.x,
          y: win.pos.y
        },
        size: {
          w: win.size.w,
          h: win.size.h
        },
        visible: win.visible
      },
      timestamp: null,
      end: null,
      tag: 'tag',
      action: ''
    };
  };

  HistoryManager.prototype.finalizeEvent = function(win, tag) {
    var new_event;
    new_event = JSON.parse(JSON.stringify(this.temp_event));
    new_event.end = {
      pos: {
        x: win.pos.x,
        y: win.pos.y
      },
      size: {
        w: win.size.w,
        h: win.size.h
      },
      visible: win.visible
    };
    new_event.timestamp = Date.now();
    new_event.tag = tag;
    new_event.action = this.getActionType(win);
    this.temp_event = null;
    return new_event;
  };

  HistoryManager.prototype.popOutEvent = function(history_step) {
    var change, index;
    change = (this.change_events.filter(function(e) {
      return e.tag === history_step.tag;
    }))[0];
    if (change != null) {
      index = this.change_events.indexOf(change);
      this.change_events.splice(index, 1);
      log(this.change_events);
      return events.dispatch('change_logged', this);
    }
  };

  HistoryManager.prototype.addBack = function(step) {
    var already_event;
    already_event = (this.change_events.filter(function(e) {
      return e.tag === step.tag;
    }))[0];
    log('addBack', step);
    if ((already_event == null) && (step != null)) {
      this.change_events.push(step);
      return events.dispatch('change_logged', this);
    }
  };

  HistoryManager.prototype.stepBack = function() {
    if (this.last_action !== 'undid' && this.index !== this.change_events.length - 1) {
      this.decrement();
    }
    this.doundo();
    this.decrement();
    return this.triggerEvent('stepped_back');
  };

  HistoryManager.prototype.stepForward = function() {
    if (this.last_action === 'undid' && this.index !== 0) {
      this.increment();
    }
    this.redodo();
    this.increment();
    return this.triggerEvent('stepped_forward');
  };

  HistoryManager.prototype.triggerEvent = function(event_name) {
    var step;
    step = this.change_events[this.prior_index];
    return events.dispatch(event_name, this, step);
  };

  HistoryManager.prototype.decrement = function() {
    this.index -= 1;
    if (this.index < 0) {
      this.index = 0;
      return log('no previous steps');
    }
  };

  HistoryManager.prototype.increment = function() {
    var max_index;
    max_index = this.change_events.length - 1;
    this.index += 1;
    if (this.index > max_index) {
      this.index = max_index;
      return log('no newer steps');
    }
  };

  HistoryManager.prototype.doundo = function() {
    var step;
    step = this.change_events[this.index];
    this.parent.update(step != null ? step.window_id : void 0, step != null ? step.start : void 0);
    this.last_action = 'undid';
    return this.prior_index = this.index;
  };

  HistoryManager.prototype.redodo = function() {
    var step;
    step = this.change_events[this.index];
    this.parent.update(step != null ? step.window_id : void 0, step != null ? step.end : void 0);
    this.last_action = 'redid';
    return this.prior_index = this.index;
  };

  HistoryManager.prototype.getStatus = function() {
    return {
      is_undoable: this.index > 0,
      is_redoable: this.index < this.change_events.length - 1,
      index: this.index,
      num_events: this.change_events.length
    };
  };

  HistoryManager.prototype.isANoChangeEvent = function(win) {
    var inc;
    inc = 0;
    if (this.temp_event.start.pos.x === win.pos.x && this.temp_event.start.pos.y === win.pos.y) {
      inc += 1;
    }
    if (this.temp_event.start.size.w === win.size.w && this.temp_event.start.size.h === win.size.h) {
      inc += 1;
    }
    if (this.temp_event.start.visible === win.visible) {
      inc += 1;
    }
    return inc === 3;
  };

  HistoryManager.prototype.getActionType = function(win) {
    var type;
    type = 'unknown';
    if (this.temp_event.start.pos.x !== win.pos.x || this.temp_event.start.pos.y !== win.pos.y) {
      type = 'moved';
    }
    if (this.temp_event.start.size.w !== win.size.w || this.temp_event.start.size.h !== win.size.h) {
      type = 'resized';
    }
    if (this.temp_event.start.visible !== win.visible) {
      type = 'closed';
    }
    return type;
  };

  HistoryManager.getRandomTag = function() {
    return Math.random().toString(36).substring(2, 8);
  };

  return HistoryManager;

})();

WinHistoryMngr = (function(_super) {
  __extends(WinHistoryMngr, _super);

  function WinHistoryMngr() {
    return WinHistoryMngr.__super__.constructor.apply(this, arguments);
  }

  WinHistoryMngr.prototype.step = null;

  WinHistoryMngr.prototype.initTempLog = function() {
    return WinHistoryMngr.__super__.initTempLog.call(this, this.parent);
  };

  WinHistoryMngr.prototype.log = function(tag) {
    return WinHistoryMngr.__super__.log.call(this, this.parent, tag);
  };

  WinHistoryMngr.prototype.doundo = function() {
    var _ref;
    this.step = this.change_events[this.index];
    this.parent.update((_ref = this.step) != null ? _ref.start : void 0);
    return this.last_action = 'undid';
  };

  WinHistoryMngr.prototype.redodo = function() {
    var _ref;
    this.step = this.change_events[this.index];
    this.parent.update((_ref = this.step) != null ? _ref.end : void 0);
    return this.last_action = 'redid';
  };

  WinHistoryMngr.prototype.triggerEvent = function(event_name) {
    return events.dispatch(event_name, this, this.step);
  };

  return WinHistoryMngr;

})(HistoryManager);

WindowManager = (function() {
  WindowManager.prototype.windows = [];

  WindowManager.prototype.history = null;

  WindowManager.prototype.colors = ['red', 'green', 'blue', 'orange', 'yellow', 'purple', 'cyan'];

  function WindowManager(app) {
    this.app = app;
    this.history = new HistoryManager(this);
  }

  WindowManager.prototype.add = function(win) {
    win.id = this.getNewId();
    win.el.classList.add(this.colors[win.id % this.colors.length]);
    events.listenTo(win.history, 'stepped_back', this.handleWinUndo, this);
    events.listenTo(win.history, 'stepped_forward', this.handleWinRedo, this);
    this.windows.push(win);
    this.app.el.appendChild(win.el);
    return this.setSelected(win);
  };

  WindowManager.prototype.getNewId = function() {
    return this.windows.length;
  };

  WindowManager.prototype.update = function(id, history_event) {
    var win;
    win = this.windows[id];
    return win != null ? win.update(null, history_event) : void 0;
  };

  WindowManager.prototype.setSelected = function(win) {
    var w, _i, _len, _ref;
    _ref = this.windows;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      w = _ref[_i];
      if (!(w !== win)) {
        continue;
      }
      w.el.classList.remove('selected');
      w.showoptionsMenu();
    }
    return win != null ? win.el.classList.add('selected') : void 0;
  };

  WindowManager.prototype.getWindowsState = function() {
    var obj, objs, w, _i, _len, _ref;
    objs = [];
    _ref = this.windows;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      w = _ref[_i];
      obj = {
        id: w.id,
        pos: w.pos,
        size: w.size
      };
      objs.push(obj);
    }
    return objs;
  };

  WindowManager.prototype.handleWinUndo = function(dispatcher, step) {
    return this.history.popOutEvent(step);
  };

  WindowManager.prototype.handleWinRedo = function(dispatcher, step) {
    return this.history.addBack(step);
  };

  return WindowManager;

})();

Events = (function() {
  function Events(context) {
    this.context = context;
    this.listeners = {};
  }

  Events.prototype.listenTo = function(target, evt_name, callback, context) {
    var new_listener, scope;
    scope = context != null ? context : this.context;
    new_listener = {
      target: target,
      callback: callback,
      context: scope
    };
    if (this.listeners[evt_name] != null) {
      this.listeners[evt_name].push(new_listener);
    } else {
      this.listeners[evt_name] = [new_listener];
    }
  };

  Events.prototype.stopListening = function(target, evt_name, callback) {
    var leftovers, listener, listeners, _i, _len;
    listeners = this.listeners[evt_name];
    leftovers = [];
    if (listeners != null) {
      for (_i = 0, _len = listeners.length; _i < _len; _i++) {
        listener = listeners[_i];
        if (!(listener.target === target && listener.callback === callback)) {
          leftovers.push(listener);
        }
      }
      this.listeners[evt_name] = leftovers;
    }
  };

  Events.prototype.isListening = function(target, evt_name, callback) {
    var confirmed, listeners;
    listeners = this.listeners[evt_name];
    confirmed = [];
    if (listeners != null) {
      confirmed = listeners.filter(function(lsnr) {
        return lsnr.target === target && lsnr.callback === callback;
      });
    }
    return confirmed !== [];
  };

  Events.prototype.dispatch = function(evt_name, caller, params) {
    var args, doCallback, listener, listeners, _i, _len;
    args = Array.prototype.slice.call(arguments, 1);
    listeners = this.listeners[evt_name];
    doCallback = function(listener) {
      listener.callback.apply(listener.context, args);
    };
    if (listeners != null) {
      for (_i = 0, _len = listeners.length; _i < _len; _i++) {
        listener = listeners[_i];
        if (listener.target === caller) {
          doCallback(listener);
        }
      }
    }
  };

  return Events;

})();

App = {
  el: d.body.querySelector('.app'),
  storage: window.localStorage,
  start_time: Date.now(),
  history_panel_el: null,
  init: function() {
    window.events = new Events(this);
    this.dragger = new Dragger(this);
    this.win_manager = new WindowManager(this);
    d.addEventListener('keydown', this.appKeyed.bind(this), false);
    window.history = (function(_this) {
      return function() {
        return _this.win_manager.history.change_events;
      };
    })(this);
    window.hStatus = (function(_this) {
      return function() {
        return _this.win_manager.history.getStatus();
      };
    })(this);
    window.hIndex = (function(_this) {
      return function() {
        return _this.win_manager.history.index;
      };
    })(this);
    window.hLastAction = (function(_this) {
      return function() {
        return _this.win_manager.history.last_action;
      };
    })(this);
    window.reset = (function(_this) {
      return function() {
        return _this.reset();
      };
    })(this);
    this.layoutWindows();
    this.addBBBar();
    this.addHistoryPanel();
    events.listenTo(this.win_manager.history, 'stepped_back', this.handleHistoryEvent);
    events.listenTo(this.win_manager.history, 'stepped_forward', this.handleHistoryEvent);
    return events.listenTo(this.win_manager.history, 'change_logged', this.historyEventLogged, this);
  },
  addNewWindow: function(x, y, w, h) {
    var current_time, win;
    if (x == null) {
      x = 100;
    }
    if (y == null) {
      y = 100;
    }
    if (w == null) {
      w = 400;
    }
    if (h == null) {
      h = 300;
    }
    win = new Win(x, y, w, h);
    this.win_manager.add(win);
    current_time = Date.now();
    if (current_time - this.start_time > 2000) {
      win.visible = false;
      this.win_manager.history.initTempLog(win);
      win.visible = true;
      return this.win_manager.history.log(win);
    }
  },
  getWindow: function(child_el) {
    var el, win;
    el = child_el.parentNode;
    if (!/win/.test(el.className)) {
      el = el.parentNode;
    }
    if (el.className === 'title_bar') {
      el = el.parentNode;
    }
    if (el.className === 'win_ctrls') {
      el = el.parentNode;
    }
    return win = (this.win_manager.windows.filter(function(w) {
      return w.el === el;
    }))[0];
  },
  initNewHistoryEvent: function(evt) {
    var win;
    win = this.getWindow(evt.target);
    if (win != null) {
      this.win_manager.history.initTempLog(win);
      return win.history.initTempLog(win);
    }
  },
  logHistoryEvent: function(evt) {
    var tag, win;
    win = this.getWindow(evt.target);
    tag = HistoryManager.getRandomTag();
    if (win != null) {
      this.win_manager.history.log(win, tag);
      win.history.log(win, tag);
      this.renderButtons();
      return this.save();
    }
  },
  handleHistoryEvent: function(hist_mnr, change_event) {
    this.save();
    return this.updateHistoryPanel(hist_mnr);
  },
  historyEventLogged: function(hist_mnr) {
    return this.updateHistoryPanel(hist_mnr);
  },
  updateHistoryPanel: function(hist_mnr) {
    var action_name, cng_evt, i, item, sel_class, time, vector_a, vector_b, win_id, _i, _len, _ref, _results;
    this.history_panel_el.innerHTML = '';
    _ref = hist_mnr.change_events;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      cng_evt = _ref[i];
      win_id = cng_evt.window_id;
      action_name = cng_evt.action;
      vector_a = cng_evt.end.pos.x;
      vector_b = cng_evt.end.pos.y;
      time = new Date(cng_evt.timestamp).toTimeString().substring(0, 9);
      sel_class = i === hist_mnr.index ? ' selected' : '';
      item = d.createElement('div');
      item.className = "history_item" + sel_class;
      item.textContent = "win " + win_id + " :: " + action_name + " " + vector_a + ", " + vector_b + " :: " + time;
      _results.push(this.history_panel_el.appendChild(item));
    }
    return _results;
  },
  layoutWindows: function() {
    var saved_windows, win, _i, _len, _results;
    if (use_storage === true && this.storage.length !== 0) {
      saved_windows = JSON.parse(this.storage.windows);
      _results = [];
      for (_i = 0, _len = saved_windows.length; _i < _len; _i++) {
        win = saved_windows[_i];
        _results.push(this.addNewWindow(win.pos.x, win.pos.y, win.size.w, win.size.h));
      }
      return _results;
    } else {
      this.addNewWindow();
      this.addNewWindow(510, 100, 400, 300);
      this.addNewWindow(100, 410, 400, 300);
      return this.addNewWindow(510, 410, 400, 300);
    }
  },
  reset: function() {
    this.storage.removeItem('windows');
    return location.reload();
  },
  addBBBar: function() {
    var bar, redo_button, undo_button;
    bar = d.createElement('div');
    bar.className = 'bbbar';
    undo_button = d.createElement('button');
    undo_button.className = 'undo disabled';
    undo_button.textContent = 'UNDO (z)';
    bar.appendChild(undo_button);
    redo_button = d.createElement('button');
    redo_button.className = 'redo disabled';
    redo_button.textContent = 'REDO (y)';
    bar.appendChild(redo_button);
    return this.el.appendChild(bar);
  },
  addHistoryPanel: function() {
    this.history_panel_el = d.createElement('div');
    this.history_panel_el.className = 'history';
    return this.el.appendChild(this.history_panel_el);
  },
  renderButtons: function(is_undoable, is_redoable) {
    var redo, undo;
    if (is_undoable == null) {
      is_undoable = true;
    }
    if (is_redoable == null) {
      is_redoable = false;
    }
    undo = this.el.querySelector('.undo');
    redo = this.el.querySelector('.redo');
    undo.classList[(is_undoable ? 'remove' : 'add')]('disabled');
    return redo.classList[(is_redoable ? 'remove' : 'add')]('disabled');
  },
  save: function() {
    return this.storage.windows = JSON.stringify(this.win_manager.getWindowsState());
  },
  appKeyed: function(evt) {
    var ESC, H, N, TAB, Y, Z, is_ctrl_keyed, is_shifted, key_pressed;
    Y = 89;
    Z = 90;
    N = 78;
    H = 72;
    ESC = 27;
    TAB = 9;
    key_pressed = evt.keyCode;
    is_ctrl_keyed = true;
    is_shifted = evt.shiftKey;
    if (key_pressed === Z && is_ctrl_keyed) {
      App.win_manager.history.stepBack();
    }
    if (key_pressed === Y && is_ctrl_keyed) {
      App.win_manager.history.stepForward();
    }
    if (key_pressed === N && is_ctrl_keyed) {
      this.addNewWindow();
    }
    if (key_pressed === ESC) {
      return this.el.classList.toggle('show_history');
    }
  },
  windowClicked: function(el) {
    var win;
    log(el);
    win = this.getWindow(el);
    this.win_manager.setSelected(win);
    if (/undo/.test(el.className)) {
      this.win_manager.history.stepBack();
    }
    if (/redo/.test(el.className)) {
      return this.win_manager.history.stepForward();
    }
  },
  handleMouseUp: function(el) {
    var win;
    if (el.className === 'win_ctrls') {
      win = this.getWindow(el.parentNode);
      return win.show(false);
    }
  }
};

App.init();

info_panel = d.querySelector('.info');

showInfoPanel = function() {
  App.el.classList.add('scooched_right');
  return info_panel.classList.add('open');
};

hideInfoPanel = function() {
  App.el.classList.remove('scooched_right');
  return info_panel.classList.remove('open');
};

toggleInfoPanel = function() {
  if (info_panel.classList.contains('open')) {
    return hideInfoPanel();
  } else {
    return showInfoPanel();
  }
};

clicked = function(evt) {
  if (evt.target.id === 'nub') {
    return toggleInfoPanel();
  }
};

d.addEventListener('click', clicked);

/*
//@ sourceMappingURL=main.map
*/
